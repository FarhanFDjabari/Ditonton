// Mocks generated by Mockito 5.0.16 from annotations
// in tv_series/test/presentation/pages/popular_tv_series_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:bloc/bloc.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tv_series/domain/usecases/get_popular_tv_series.dart' as _i2;
import 'package:tv_series/presentation/bloc/popular_tv_series/popular_tv_series_bloc.dart'
    as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetPopularTvSeries_0 extends _i1.Fake
    implements _i2.GetPopularTvSeries {}

class _FakePopularTvSeriesState_1 extends _i1.Fake
    implements _i3.PopularTvSeriesState {}

class _FakeStreamSubscription_2<T> extends _i1.Fake
    implements _i4.StreamSubscription<T> {}

/// A class which mocks [PopularTvSeriesBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockPopularTvSeriesBloc extends _i1.Mock
    implements _i3.PopularTvSeriesBloc {
  MockPopularTvSeriesBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetPopularTvSeries get getPopularTvSeries =>
      (super.noSuchMethod(Invocation.getter(#getPopularTvSeries),
          returnValue: _FakeGetPopularTvSeries_0()) as _i2.GetPopularTvSeries);
  @override
  _i3.PopularTvSeriesState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakePopularTvSeriesState_1()) as _i3.PopularTvSeriesState);
  @override
  _i4.Stream<_i3.PopularTvSeriesState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.PopularTvSeriesState>.empty())
          as _i4.Stream<_i3.PopularTvSeriesState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i3.PopularTvSeriesEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i3.PopularTvSeriesEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i4.Stream<_i5.Transition<_i3.PopularTvSeriesEvent, _i3.PopularTvSeriesState>>
      transformEvents(
              _i4.Stream<_i3.PopularTvSeriesEvent>? events,
              _i5.TransitionFunction<_i3.PopularTvSeriesEvent,
                      _i3.PopularTvSeriesState>?
                  transitionFn) =>
          (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue:
                  Stream<_i5.Transition<_i3.PopularTvSeriesEvent, _i3.PopularTvSeriesState>>.empty()) as _i4
              .Stream<_i5.Transition<_i3.PopularTvSeriesEvent, _i3.PopularTvSeriesState>>);
  @override
  void emit(_i3.PopularTvSeriesState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i3.PopularTvSeriesEvent>(
          _i5.EventHandler<E, _i3.PopularTvSeriesState>? handler,
          {_i5.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  _i4.Stream<_i3.PopularTvSeriesState> mapEventToState(
          _i3.PopularTvSeriesEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i3.PopularTvSeriesState>.empty())
          as _i4.Stream<_i3.PopularTvSeriesState>);
  @override
  void onTransition(
          _i5.Transition<_i3.PopularTvSeriesEvent, _i3.PopularTvSeriesState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i4.Stream<_i5.Transition<_i3.PopularTvSeriesEvent, _i3.PopularTvSeriesState>>
      transformTransitions(
              _i4.Stream<_i5.Transition<_i3.PopularTvSeriesEvent, _i3.PopularTvSeriesState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue:
                      Stream<_i5.Transition<_i3.PopularTvSeriesEvent, _i3.PopularTvSeriesState>>.empty())
              as _i4.Stream<
                  _i5.Transition<_i3.PopularTvSeriesEvent, _i3.PopularTvSeriesState>>);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.StreamSubscription<_i3.PopularTvSeriesState> listen(
          void Function(_i3.PopularTvSeriesState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue:
                  _FakeStreamSubscription_2<_i3.PopularTvSeriesState>())
          as _i4.StreamSubscription<_i3.PopularTvSeriesState>);
  @override
  void onChange(_i5.Change<_i3.PopularTvSeriesState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
